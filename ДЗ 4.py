# Задание 1
#Реализовать скрипт, в котором должна быть предусмотрена функция расчёта заработной
#платы сотрудника. Используйте в нём формулу: (выработка в часах*ставка в час) + премия. Во
#время выполнения расчёта для конкретных значений необходимо запускать скрипт с
#параметрами
def func_calc():
    x = float(input("Введите отработанное время в часах "))
    a = float(input("Введите трудовую ставку "))
    b = float(input("Введите размер премии "))
    s = x * a + b
    return s
print(f'Ваша зп: {func_calc()}')

# задание 2
# Представлен список чисел. Необходимо вывести элементы исходного списка, значения
# которых больше предыдущего элемента.
# Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. Для его
# формирования используйте генератор.
# Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
# Результат: [12, 44, 4, 10, 78, 123].

my_list = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
new_list = [my_list[i] for i in range(1,len(my_list)) if my_list[i] > my_list[i-1]]
print(*new_list)

# задание 3
# Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Решите задание в одну строку.
# Подсказка: используйте функцию range() и генератор.
n = 240
list(range(20,n + 1))
my_list2 = list(range(20,n + 1))
print(my_list2)
new_list2 = [my_list2[i] for i in range(1,len(my_list2)) if my_list2[i] % 20 == 0 or my_list2[i] % 21 == 0]
print(*new_list2)

# задание 4
#Представлен список чисел. Определите элементы списка, не имеющие повторений.
#Сформируйте итоговый массив чисел, соответствующих требованию. Элементы выведите в
#порядке их следования в исходном списке. Для выполнения задания обязательно используйте генератор.
#Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
#Результат: [23, 1, 3, 10, 4, 11]

my_list3 = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
print('Исходные элементы списка n ',my_list3)
new_list3 = [i for i in my_list3 if my_list3.count(i) == 1]
print(*new_list3)

# задание 5
#Реализовать формирование списка, используя функцию range() и возможности генератора. В
#список должны войти чётные числа от 100 до 1000 (включая границы). Нужно получить
#результат вычисления произведения всех элементов списка.
#Подсказка: использовать функцию reduce().

from functools import reduce
my_list4 = [i for i in range(100,1001,2)]
print(my_list4)
all = reduce(lambda x,y: x * y, my_list4)
print(all)

# задание 6
#Реализовать два небольших скрипта:
#● итератор, генерирующий целые числа, начиная с указанного;
#● итератор, повторяющий элементы некоторого списка, определённого заранее.
#Подсказка: используйте функцию count() и cycle() модуля itertools. Обратите внимание, что
#создаваемый цикл не должен быть бесконечным. Предусмотрите условие его завершения.
#Например, в первом задании выводим целые числа, начиная с 3. При достижении числа 10 —
#авершаем цикл. Вторым пунктом необходимо предусмотреть условие, при котором
#повторение элементов списка прекратится.

import itertools
n = int(input('введите число с которого начинается итерация '))
elem = itertools.count(n)
for i in elem:
    print(i)
    if i > 10:
        break

import itertools
list = [5, 3, 3, 1, 0, 4, 2, 4, 7, 3]
list2 = itertools.cycle(list)
count = 0
for i in list2:
    if count > 20:
        break
    else:
        print(i)
        count = count + 1

# задание 7
#Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное
#значение. При вызове функции должен создаваться объект-генератор. Функция вызывается
#следующим образом: for el in fact(n). Она отвечает за получение факториала числа. В цикле
#нужно выводить только первые n чисел, начиная с 1! и до n!.
#Подсказка: факториал числа n — произведение чисел от 1 до n. Например, факториал
#четырёх 4! = 1 * 2 * 3 * 4 = 24.

from math import factorial

def factorial_gen(n):
    for i in range(n):
        print(i, end='! = ')
        yield factorial(i)

print("<<Программа вычисления факториала числа>>")
n = int(input("Введите число факториал которого нужно подсчитать "))
n = n + 1
for el in factorial_gen(n):
    print(el)


















